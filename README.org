Joyful Web

* What is this?

The Joyful Web package generates documents from source files written
in Org markup and rendered with [[http://jinja.pocoo.org/][Jinja2]] templates.

Joyful Web is generic enough to generate arbitrary documents but is
intended for "static generated" web sites, blogs, RSS feeds, etc.

* How does it work

Joyful Web generates output in some format (usually HTML) from one or
more input Org documents.  The process can be thought of as a mapping
of =N= Org documents to =M= output documents.  The mapping process
follows two stages:

** Compiling

Each individual Org document is /compiled/ into a JSON representation.
The resulting JSON file includes the original Org text and some
derived information including;

- the HTML =<body>= as exported by Emacs and Org.
- a representation of the =org-element= tree
- structures capturing Org document keywords and headlines 
- Git commit history of the original Org source

Joyful web can save the JSON text to a file and reload it for the next
stage of processing.

** Rendering

A number of the compiled JSON files are loaded into Joyful Web for the
process of /rendering/ a single output document.  Rendering is
accomplished through Jinja2 templates.  The JSON document structures
are made available, as-is, to the template through the =doc= array
variable.  For convenience, the keys of the dictionary held in the
=doc[0]= element are also directly available at top-level.  These keys
include:

- =orgtext= :: the original Org text

- =orghtml= :: the HTML =<body>= text produced by Emacs by exporting the original Org file.

- =orgtree= :: the (Jinja2/Python equivalent of the) =org-element= tree.

- =revs= :: a list of pairs of Git commit hash and associated Unix time stamps ordered newest-first.

- =meta= :: A number of metadata parameters extracted from the above for convenience.  For example, =meta.tags= contains the list tags as set by the =TAGS:= Org document keyword.

For example, one might insert the HTML body of the first document with
a Jinja2 template like:

#+BEGIN_EXAMPLE
{{ doc[0].orghtml }}
#+END_EXAMPLE

Or, because we are interested in the first (maybe only) input document, this can be expressed more succintly like:

#+BEGIN_EXAMPLE
{{ orghtml }}
#+END_EXAMPLE

Any keys from subsequent document structures must be accessed explicitly via the =docs[i]= array.

** Policy

Joyful Web processing tries to avoid policy lock-in.  This means it is up to the user to determine how they want to organize their input Org files, the rendered output files and the =N-to-M= mapping between them.  This user policy is expressed through a Joyful Web configuration file, calls to the command line program =joy= (see below) and of course in the user-provided Jinja2 templates.  

** The =joy= command

Joyful Web provides a command line interface program called =joy=.  Its basic usage:

#+BEGIN_SRC bash
  joy --help
  joy [command] [options] [arguments]
#+END_SRC

The two main commands correspond to the two processing stages:

#+BEGIN_SRC bash
  joy compile -o myblogpost.json myblogpost.org
  joy render -o myblogpost.html blogtemplate.html myblogpost.json
#+END_SRC

** Command Configuration

Joyful Web itself and specifically the =joy= command are configured with a set of named parameters.  These parameters may come from three sources.  In order of increasing precedence and with some example spelling:

1. environment variables.  These are named like =JOY_<PARAMETER_NAME>=.
2. configuration file.  A =parameter_name= variable in the =[joy COMMAND]= sections (see more below).
3. command line options.  A =--parameter-name= command line option.  See =joy COMMAND --help=.

The =joy= command parameters are:

- =org_path= :: A list of directories in which Org files may be found, potentially in sub-directories.  This is used in =joy compile=.  The path where the input file was found is stored in the resulting JSON file.
- =template_path= :: A list of directories in which Jinja2 template files may be found.  This is used by =joy render= to locate the named template.

** Configuration File

Beside providing defaults for the =joy= commands, the configuration file may be used to make parameters available to a rendering template.

The configuration file syntax is simple.  It consists of a number of named sections which contain a number of key/value pairs.  The values in the configuration file are expanded for both environment variable and user directory tilde (=~=) references.

Section names are interpreted as follows:

- =[joy COMMAND]= :: interpreted by =joy COMMAND= to provide defaults for command options as described above.  See =joy COMMAND --help= and discussion above.
 
- =[global]= :: passed directly to all template files as =cfg.<parameter>=.

- =[template XXX]= :: passed directly to template file =XXX= (if used) as =cfg.<parameter>=.  These merge with and override any parameters that may be provided by =[global]=.


#+INCLUDE: "example.cfg"

Then one might find in the =blog.html= template file something like:

#+BEGIN_SRC HTML
  <title> {{ cfg.title }} </title>
#+END_SRC

* Other things

Joyful Web provides some other functionality.

** Org exporters

Joyful Web implicitly converts Org files to other formats as described above.  These and other converters may be called with the =joy export= command:

#+BEGIN_SRC bash
joy export [-f FORMAT] -o myfile.FORMAT /path/to/myfile.org
#+END_SRC

The =FORMAT= in the above example can be guessed by the output extension or set explicitly.  To see supported formats run:

#+BEGIN_SRC bash
joy list formats
#+END_SRC

- =json= :: Dump the =org-element= tree as a JSON file.  Note, this is only a fragment of the JSON file produced by the =joy compile= command.
- =html= :: The full Org file exported as HTML
- =body= :: Just the =<bod>= part of the above
- =pdf= :: The full Org file exported as LaTeX/PDF.

Adding support for a new format is just a matter of adding a =joy/org2*.el= file.  

Note, as with =joy compile=, the exporter runs in the Org source directory which may cause other files to be deposited.

* Automation

As the website gets larger it is a good idea to automate the running
of =joy= with a build tool such as [[https://waf.io/][Waf]].  On example is used in the
joyful authors web site.  See the [[https://github.com/brettviren/org-pub/blob/master/wscript][wscript]] file.  The basic idea is to
break out the individual export, revisions and rendering in a
fine-grained way to let Waf work its magic.
